// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ChangeAddressBoss extends ethereum.Event {
  get params(): ChangeAddressBoss__Params {
    return new ChangeAddressBoss__Params(this);
  }
}

export class ChangeAddressBoss__Params {
  _event: ChangeAddressBoss;

  constructor(event: ChangeAddressBoss) {
    this._event = event;
  }

  get target(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class UpdateBlackList extends ethereum.Event {
  get params(): UpdateBlackList__Params {
    return new UpdateBlackList__Params(this);
  }
}

export class UpdateBlackList__Params {
  _event: UpdateBlackList;

  constructor(event: UpdateBlackList) {
    this._event = event;
  }

  get target(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get isAdd(): i32 {
    return this._event.parameters[1].value.toI32();
  }
}

export class UpdateWhiteList extends ethereum.Event {
  get params(): UpdateWhiteList__Params {
    return new UpdateWhiteList__Params(this);
  }
}

export class UpdateWhiteList__Params {
  _event: UpdateWhiteList;

  constructor(event: UpdateWhiteList) {
    this._event = event;
  }

  get target(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get isAdd(): i32 {
    return this._event.parameters[1].value.toI32();
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  BP(): Address {
    let result = super.call("BP", "BP():(address)", []);

    return result[0].toAddress();
  }

  try_BP(): ethereum.CallResult<Address> {
    let result = super.tryCall("BP", "BP():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  BPDisabledForever(): boolean {
    let result = super.call(
      "BPDisabledForever",
      "BPDisabledForever():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_BPDisabledForever(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "BPDisabledForever",
      "BPDisabledForever():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  addressForBosses(): Address {
    let result = super.call(
      "addressForBosses",
      "addressForBosses():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_addressForBosses(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "addressForBosses",
      "addressForBosses():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  blacklistTime(): BigInt {
    let result = super.call("blacklistTime", "blacklistTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_blacklistTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "blacklistTime",
      "blacklistTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  bpEnabled(): boolean {
    let result = super.call("bpEnabled", "bpEnabled():(bool)", []);

    return result[0].toBoolean();
  }

  try_bpEnabled(): ethereum.CallResult<boolean> {
    let result = super.tryCall("bpEnabled", "bpEnabled():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  buyFeeRate(): BigInt {
    let result = super.call("buyFeeRate", "buyFeeRate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_buyFeeRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("buyFeeRate", "buyFeeRate():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  maxSupply(): BigInt {
    let result = super.call("maxSupply", "maxSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxSupply", "maxSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  sellFeeRate(): BigInt {
    let result = super.call("sellFeeRate", "sellFeeRate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_sellFeeRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("sellFeeRate", "sellFeeRate():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(recipient: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(sender: Address, recipient: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    sender: Address,
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  uniswapV2Pair(): Address {
    let result = super.call("uniswapV2Pair", "uniswapV2Pair():(address)", []);

    return result[0].toAddress();
  }

  try_uniswapV2Pair(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "uniswapV2Pair",
      "uniswapV2Pair():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  uniswapV2Router(): Address {
    let result = super.call(
      "uniswapV2Router",
      "uniswapV2Router():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_uniswapV2Router(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "uniswapV2Router",
      "uniswapV2Router():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get newRouter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RemoveBlackListsCall extends ethereum.Call {
  get inputs(): RemoveBlackListsCall__Inputs {
    return new RemoveBlackListsCall__Inputs(this);
  }

  get outputs(): RemoveBlackListsCall__Outputs {
    return new RemoveBlackListsCall__Outputs(this);
  }
}

export class RemoveBlackListsCall__Inputs {
  _call: RemoveBlackListsCall;

  constructor(call: RemoveBlackListsCall) {
    this._call = call;
  }

  get addresses(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class RemoveBlackListsCall__Outputs {
  _call: RemoveBlackListsCall;

  constructor(call: RemoveBlackListsCall) {
    this._call = call;
  }
}

export class RemoveWhiteListsCall extends ethereum.Call {
  get inputs(): RemoveWhiteListsCall__Inputs {
    return new RemoveWhiteListsCall__Inputs(this);
  }

  get outputs(): RemoveWhiteListsCall__Outputs {
    return new RemoveWhiteListsCall__Outputs(this);
  }
}

export class RemoveWhiteListsCall__Inputs {
  _call: RemoveWhiteListsCall;

  constructor(call: RemoveWhiteListsCall) {
    this._call = call;
  }

  get _target(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveWhiteListsCall__Outputs {
  _call: RemoveWhiteListsCall;

  constructor(call: RemoveWhiteListsCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetAddressForBossesCall extends ethereum.Call {
  get inputs(): SetAddressForBossesCall__Inputs {
    return new SetAddressForBossesCall__Inputs(this);
  }

  get outputs(): SetAddressForBossesCall__Outputs {
    return new SetAddressForBossesCall__Outputs(this);
  }
}

export class SetAddressForBossesCall__Inputs {
  _call: SetAddressForBossesCall;

  constructor(call: SetAddressForBossesCall) {
    this._call = call;
  }

  get _addressForBosses(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetAddressForBossesCall__Outputs {
  _call: SetAddressForBossesCall;

  constructor(call: SetAddressForBossesCall) {
    this._call = call;
  }
}

export class SetBPAddrssCall extends ethereum.Call {
  get inputs(): SetBPAddrssCall__Inputs {
    return new SetBPAddrssCall__Inputs(this);
  }

  get outputs(): SetBPAddrssCall__Outputs {
    return new SetBPAddrssCall__Outputs(this);
  }
}

export class SetBPAddrssCall__Inputs {
  _call: SetBPAddrssCall;

  constructor(call: SetBPAddrssCall) {
    this._call = call;
  }

  get _bp(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetBPAddrssCall__Outputs {
  _call: SetBPAddrssCall;

  constructor(call: SetBPAddrssCall) {
    this._call = call;
  }
}

export class SetBlackListsCall extends ethereum.Call {
  get inputs(): SetBlackListsCall__Inputs {
    return new SetBlackListsCall__Inputs(this);
  }

  get outputs(): SetBlackListsCall__Outputs {
    return new SetBlackListsCall__Outputs(this);
  }
}

export class SetBlackListsCall__Inputs {
  _call: SetBlackListsCall;

  constructor(call: SetBlackListsCall) {
    this._call = call;
  }

  get addresses(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class SetBlackListsCall__Outputs {
  _call: SetBlackListsCall;

  constructor(call: SetBlackListsCall) {
    this._call = call;
  }
}

export class SetBotProtectionDisableForeverCall extends ethereum.Call {
  get inputs(): SetBotProtectionDisableForeverCall__Inputs {
    return new SetBotProtectionDisableForeverCall__Inputs(this);
  }

  get outputs(): SetBotProtectionDisableForeverCall__Outputs {
    return new SetBotProtectionDisableForeverCall__Outputs(this);
  }
}

export class SetBotProtectionDisableForeverCall__Inputs {
  _call: SetBotProtectionDisableForeverCall;

  constructor(call: SetBotProtectionDisableForeverCall) {
    this._call = call;
  }
}

export class SetBotProtectionDisableForeverCall__Outputs {
  _call: SetBotProtectionDisableForeverCall;

  constructor(call: SetBotProtectionDisableForeverCall) {
    this._call = call;
  }
}

export class SetBpEnabledCall extends ethereum.Call {
  get inputs(): SetBpEnabledCall__Inputs {
    return new SetBpEnabledCall__Inputs(this);
  }

  get outputs(): SetBpEnabledCall__Outputs {
    return new SetBpEnabledCall__Outputs(this);
  }
}

export class SetBpEnabledCall__Inputs {
  _call: SetBpEnabledCall;

  constructor(call: SetBpEnabledCall) {
    this._call = call;
  }

  get _enabled(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetBpEnabledCall__Outputs {
  _call: SetBpEnabledCall;

  constructor(call: SetBpEnabledCall) {
    this._call = call;
  }
}

export class SetWhiteListsCall extends ethereum.Call {
  get inputs(): SetWhiteListsCall__Inputs {
    return new SetWhiteListsCall__Inputs(this);
  }

  get outputs(): SetWhiteListsCall__Outputs {
    return new SetWhiteListsCall__Outputs(this);
  }
}

export class SetWhiteListsCall__Inputs {
  _call: SetWhiteListsCall;

  constructor(call: SetWhiteListsCall) {
    this._call = call;
  }

  get _target(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetWhiteListsCall__Outputs {
  _call: SetWhiteListsCall;

  constructor(call: SetWhiteListsCall) {
    this._call = call;
  }
}

export class SweepTokenForBossesCall extends ethereum.Call {
  get inputs(): SweepTokenForBossesCall__Inputs {
    return new SweepTokenForBossesCall__Inputs(this);
  }

  get outputs(): SweepTokenForBossesCall__Outputs {
    return new SweepTokenForBossesCall__Outputs(this);
  }
}

export class SweepTokenForBossesCall__Inputs {
  _call: SweepTokenForBossesCall;

  constructor(call: SweepTokenForBossesCall) {
    this._call = call;
  }
}

export class SweepTokenForBossesCall__Outputs {
  _call: SweepTokenForBossesCall;

  constructor(call: SweepTokenForBossesCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
